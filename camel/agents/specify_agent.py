# =========== Copyright 2023 @ CAMEL-AI.org. All Rights Reserved. ===========
# Licensed under the Apache License, Version 2.0 (the “License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =========== Copyright 2023 @ CAMEL-AI.org. All Rights Reserved. ===========
from typing import Any, Optional, Union

from camel.agents import ChatAgent, clarify_agent
from camel.messages import BaseMessage
from camel.prompts import TextPrompt
from camel.types import ModelType, RoleType


class TaskSpecifyAgent(ChatAgent):
    r"""An agent that specify the initial task from the question answer
    pairs generated by the task clarifier agent.

    Args:
        model (ModelType, optional): The type of model to use for the agent.
            (default: :obj:`ModelType.GPT_3_5_TURBO`)
        model_config (Any, optional): The configuration for the model.
            (default: :obj:`None`)
    """

    def __init__(
        self,
        model: Optional[ModelType] = None,
        model_config: Optional[Any] = None,
    ) -> None:
        system_message = BaseMessage(
            role_name="Task Specifier",
            role_type=RoleType.ASSISTANT,
            meta_dict=None,
            content="You can generate specified task from clarifications.",
        )
        super().__init__(system_message, model, model_config)

    def run(
        self,
        task_prompt: Union[str, TextPrompt],
        question_answer_pairs: dict[str, str],
    ) -> Union[str, TextPrompt]:
        r"""Generate specified task from clarifications.
        Args:
            task_prompt (Union[str, TextPrompt]): The prompt that needs to be
                specified.
            question_answer_pairs (dict[str, str]): The question answer pairs
                generated by the task clarifier agent.

        Returns:
            Union[str, TextPrompt]: The specified task prompt.
        """

        # For Specification #

        specify_prompt = TextPrompt(
            "You are a task specifier agent, and you are going to specify " +
            f"the initial task {task_prompt} using the " +
            f"generated question answer pairs: {question_answer_pairs}\n" +
            "Please give a specification of the initial task." +
            "The specified task should be concise and clear," +
            "and it should intergrate the user needs.\n"
        )  # TODO: The output should include more specific information, like
        # the number, the values, the entities, etc.

        specify_msg = BaseMessage.make_user_message(role_name="Task Specifier",
                                                    content=specify_prompt)

        response = self.step(specify_msg)

        if response.terminated:
            raise ValueError("The specification of the task failed.\n" +
                             f"Error:\n{response.info}")
        msg = response.msg

        return msg.content


if __name__ == "__main__":
    task_prompt = "Develop a trading bot for stock market"
    task_clarify_agent = clarify_agent.TaskClarifyAgent()
    question_answer_pairs = task_clarify_agent.run(task_prompt=task_prompt)
    task_specify_agent = TaskSpecifyAgent()
    specified_task = \
        task_specify_agent.run(task_prompt=task_prompt,
                               question_answer_pairs=question_answer_pairs)
    print(f"The specified task is: {specified_task}")
